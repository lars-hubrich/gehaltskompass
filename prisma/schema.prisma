generator client {
  provider = "prisma-client-js"
}

datasource db {
  //provider = "postgresql"
  provider = "sqlite" // for local testing purposes
  url      = env("DATABASE_URL")
}

// testing
model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// Authentication
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  items Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// model user {
//   id       String   @id @default(cuid())
//   email    String   @unique
//   name     String?
//   salaries salary[]
// }
//
// model salary {
//   id    String @id
//   month String // Format "YYYY-MM"
//
//   // Relation zum User
//   user_id String
//   user    user   @relation(fields: [user_id], references: [id])
//
//   // Einkommenspositionen
//   incomes income[]
//
//   // Brutto-Bestandteile
//   brutto_tax Float
//   brutto_av  Float
//   brutto_pv  Float
//   brutto_rv  Float
//   brutto_kv  Float
//
//   // Steuer-Abzug
//   deduction_tax_income Float
//   deduction_tax_church Int
//
//   // Sozialversicherungs-Abzug
//   social_av Float
//   social_pv Float
//   social_rv Float
//   social_kv Float
//
//   // Auszahlung
//   payout_netto    Float
//   payout_transfer Float
//   payout_vwl      Float
//   payout_other    Float
//
//   // Metadaten zur Abrechnung
//   sap_number Int
//   svn_number Int
//
//   // Zeitstempel
//   updated DateTime
//   created DateTime
//
//   @@map("salaries")
// }
//
// model income {
//   id         Int    @id @default(autoincrement())
//   salary_id  String
//   salary     salary @relation(fields: [salary_id], references: [id])
//   name       String
//   identifier String
//   value      Float
//
//   @@map("income")
// }
